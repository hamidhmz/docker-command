docker <command> <sub-command> (options)
docker <command> (options)

1- docker version

2- docker info

3- docker 

4-docker stop $(docker ps -a -q)                  and then restart docker

https://medium.com/the-code-review/top-10-docker-commands-you-cant-live-without-54fb6377f481


docker ps(docker container ls) — Lists running containers. Some useful flags include: -a / -all for all containers (default shows just running) and —-quiet /-q to list just their ids (useful for when you want to get all the containers).
docker pull — Most of your images will be created on top of a base image from the Docker Hub registry. Docker Hub contains many pre-built images that you can pull and try without needing to define and configure your own. To download a particular image, or set of images (i.e., a repository), use docker pull.
docker build — The docker build command builds Docker images from a Dockerfile and a “context”. A build’s context is the set of files located in the specified PATH or URL. Use the -t flag to label the image, for example docker build -t my_container . with the . at the end signalling to build using the currently directory.
docker run — Run a docker container based on an image, you can follow this on with other commands, such as -it bash to then run bash from within the container. Also see Top 10 options for docker run — a quick reference guide for the CLI command. docker run my_image -it bash
docker logs — Use this command to display the logs of a container, you must specify a container and can use flags, such as --follow to follow the output in the logs of using the program. docker logs --follow my_container
docker volume ls — This lists the volumes, which are the preferred mechanism for persisting data generated by and used by Docker containers.
docker rm — Removes one or more containers. docker rm my_container
docker rmi — Removes one or more images. docker rmi my_image
docker stop — Stops one or more containers. docker stop my_container stops one container, while docker stop $(docker ps -a -q) stops all running containers. A more direct way is to use docker kill my_container, which does not attempt to shut down the process gracefully first.
Use them together, for example to clean up all your docker images and containers:
kill all running containers with docker kill $(docker ps -q)
delete all stopped containers with docker rm $(docker ps -a -q)
delete all images with docker rmi $(docker images -q)



5-docker container run --publish 80:80 nginx / docker container run -p 80:80 nginx — docker port side must be always 80       for -p host port is in left side and container port is in right side
6-docker stop <docker-id>
7-docker container ls —see list of all running container with their ids
8-docker container run —always starts a new container
9-docker container start —to start an existing stopped one
10-docker container ls — for default show all running containers
11-docker container ls -a —show all containers
12-docker container run --publish 80:80 --detach nginx — for start in background
13-docker container logs <id/name>
14-docker container run --publish 80:80 --detach --name <container name> nginx — docker container run --publish 80:80 --detach --name webhost nginx
15-docker container top <container id/name> — return list of pid
16-docker rm <-f>(force) — remove one or more containers ex: docker container rm ff9 466 255 dff 47c 5ff 5e6 d63 b344 b3fd 748
17-docker container run -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql  — if you wanna detached add -d     -e means environment variables 
18-docker logs db — for see random password that generated for mysql
19-docker container run --name webserver -p 8080:80 httpd — for apache
20-docker container inspect [containerName] — details of one container config with json format
21-docker container stats  — performance stats for all containers live
22-docker container run -it[options] IMAGE [command] [arg...] — start new container interactively ex: docker container run -it --name proxy nginx bash ///default CMD for ubuntu is bash so we don't have to specify it
23-docker container exec -it — run additional command in existing container
24-docker container start [options] CONTAINER [container...] — for run existing container ex:docker container start -ai ubuntu
25-docker container exec [options] CONTAINER COMMAND [arg...]  — run additional process in running container //// if we want to shell inside running container //eg:docker container exec -it mysql bash
26-docker-compose up --build  — for run docker-compose file and build related image
27-docker container port [containerName]  — for see port of container 
28-docker container inspect --format '{{ [which node] }}' [containerName] — if you wanna break inspect you will use this command eg:docker container inspect --format '{{ .NetworkSettings.IpAddress }}' [containerName]
29-docker network ls  — show all network
30-docker network inspect [networkName]  — show inspect of network
31-docker network create [networkName]  — create a new network
32-docker network connect [network] [container]  — connect a net work to an container
33-docker network disconnect [network] [container]  — disconnect a net work to an container
34-docker container exec -it [containerName] ping [containerName ] — if we wanna see 2 container have a relation to each other
35-docker history [imageName] — print all image layer
36-docker image inspect [imageName]  — print all detail about that image
37-docker image ls — this will shows all images that we have
38-docker image tag <SOURCE_IMAGE[:TAG]> <TARGET_IMAGE[:TAG]> — This command just creates an alias (a reference) by the name of the TARGET_IMAGE that refers to the SOURCE_IMAGE. That’s all it does. It’s like assigning an existing image another name to refer to it. Notice how the tag is specified as optional here as well, by the [:TAG] .
39-docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql // this will gave a name to volume as mysql-db
40-docker volume create [OPTIONS] [VOLUME] // we can create docker volume without docker run command
41-docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v /var/lib/mysql:/var/lib/mysql mysql // you can use this for binding mount
42-docker-compose up // when you have docker-compose file build when couldn't find image 
43-docker-compose down //stop all containers and remove cont/vol/vol/net
44-docker-compose --help // show all command 
45-docker-compose ps // show all containers running from docker-compose path
46-docker-compose down -v // this also remove all volumes 
47-docker-compose up --build or docker-compose build // this will rebuild your image when you change your image you must use this
48-docker export [OPTIONS] CONTAINER // export or backup from container e.g:docker export --output="latest.tar" red_panda          or                  docker export red_panda > latest.tar
49-docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]] e.g: docker import http://example.com/exampleimage.tgz //This will create a new untagged image.
50-docker save [OPTIONS] IMAGE [IMAGE...] e.g: docker save -o fedora-all.tar fedora //Save one or more images to a tar archive e.g: docker save myimage:latest | gzip > myimage_latest.tar.gz
51-docker load [OPTIONS] e.g:docker load < busybox.tar.gz //Load an image from a tar archive or STDIN 
52-docker cp foo.txt mycontainer:/foo.txt // One specific file can be copied TO the container like that 
53-docker cp mycontainer:/foo.txt foo.txt // One specific file can be copied FROM the container like that
